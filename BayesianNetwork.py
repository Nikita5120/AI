# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10G_uyQHAVdm6aU2Vb3xlRy3J02DbRo3q
"""

pip install pgmpy pandas scikit-learn

# Step 1: Import Libraries
from pgmpy.models import DiscreteBayesianNetwork
from pgmpy.estimators import MaximumLikelihoodEstimator
from pgmpy.inference import VariableElimination
import pandas as pd

# Step 2: Create the Dataset (Toy dataset for classification)
data = pd.DataFrame([
    ['young', 'high', 'no', 'fair', 'no'],
    ['young', 'high', 'no', 'excellent', 'no'],
    ['middle_aged', 'high', 'no', 'fair', 'yes'],
    ['senior', 'medium', 'no', 'fair', 'yes'],
    ['senior', 'low', 'yes', 'fair', 'yes'],
    ['senior', 'low', 'yes', 'excellent', 'no'],
    ['middle_aged', 'low', 'yes', 'excellent', 'yes'],
    ['young', 'medium', 'no', 'fair', 'no'],
    ['young', 'low', 'yes', 'fair', 'yes'],
    ['senior', 'medium', 'yes', 'fair', 'yes'],
    ['young', 'medium', 'yes', 'excellent', 'yes'],
    ['middle_aged', 'medium', 'no', 'excellent', 'yes'],
    ['middle_aged', 'high', 'yes', 'fair', 'yes'],
    ['senior', 'medium', 'no', 'excellent', 'no']
], columns=['age', 'income', 'student', 'credit_rating', 'buys_computer'])

# Step 3: Define the structure of the Bayesian Network (Manually for simplicity)
model = DiscreteBayesianNetwork([
    ('age', 'buys_computer'),
    ('income', 'buys_computer'),
    ('student', 'buys_computer'),
    ('credit_rating', 'buys_computer')
])

# Step 4: Train the model using Maximum Likelihood Estimation
model.fit(data, estimator=MaximumLikelihoodEstimator)

# Step 5: Perform Inference
inference = VariableElimination(model)

# Query Example: What is the probability of buying a computer for a young student with high income and fair credit?
query_result = inference.query(
    variables=['buys_computer'],
    evidence={
        'age': 'young',
        'income': 'high',
        'student': 'yes',
        'credit_rating': 'fair'
    }
)

print(query_result)

# Query 1: Probability of buying a computer given certain conditions
query_result1 = inference.query(
    variables=['buys_computer'],
    evidence={
        'age': 'young',
        'income': 'high',
        'student': 'yes',
        'credit_rating': 'fair'
    }
)

# Query 2: What if the person is middle-aged, with medium income and excellent credit?
query_result2 = inference.query(
    variables=['buys_computer'],
    evidence={
        'age': 'middle_aged',
        'income': 'medium',
        'student': 'no',
        'credit_rating': 'excellent'
    }
)

print("Query 1 Result:\n", query_result1)
print("\nQuery 2 Result:\n", query_result2)

pip install networkx matplotlib

import matplotlib.pyplot as plt
import networkx as nx
from pgmpy.models import DiscreteBayesianNetwork

# Define the Bayesian Network (same as before)
model = DiscreteBayesianNetwork([
    ('age', 'buys_computer'),
    ('income', 'buys_computer'),
    ('student', 'buys_computer'),
    ('credit_rating', 'buys_computer')
])

# Create the network graph using NetworkX
graph = nx.DiGraph()  # Directed graph to represent dependencies
graph.add_edges_from(model.edges())

# Draw the graph
pos = nx.spring_layout(graph)  # Positions for nodes
plt.figure(figsize=(8, 6))
nx.draw(graph, pos, with_labels=True, node_size=3000, node_color='skyblue', font_size=10, font_weight='bold', edge_color='gray')
plt.title("Bayesian Network Structure", fontsize=14)
plt.show()

